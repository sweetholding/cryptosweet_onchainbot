import os
import logging
import nest_asyncio
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Railway
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
TOKEN = "7594557278:AAH3JKXfwupIMLqmmzmjYbH3ToSSTUGnmHo"
CHAT_ID = "423798633"

if not TOKEN or not CHAT_ID:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä—ã–Ω–∫–æ–º!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def check_large_transactions():
    url = "https://api.dexscreener.com/latest/dex/tokens"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DexScreener: {e}")
        return
    
    if "pairs" in data:
        for token in data["pairs"]:
            try:
                volume = float(token.get("volume", {}).get("h24", 0))
                price_change = float(token.get("priceChange", {}).get("h24", 0))
                symbol = token["baseToken"]["symbol"].upper()

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                if symbol in ["BTC", "ETH"]:
                    threshold = 1000000
                else:
                    threshold = 100000
                
                if volume > threshold:
                    message = (
                        f"üî• –ö—Ä—É–ø–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ {symbol}!
"
                        f"üìä –û–±—ä–µ–º –∑–∞ 24—á: ${volume:,.2f}
"
                        f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ DexScreener]({token['url']})"
                    )
                    await app.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    asyncio.create_task(check_loop())
    await app.run_polling()

async def check_loop():
    while True:
        await check_large_transactions()
        await asyncio.sleep(600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(main())
