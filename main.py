import os
import logging
import nest_asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import requests
import asyncio
from collections import deque
from datetime import datetime, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è Railway (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncio)
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
TOKEN = "7594557278:AAH3JKXfwupIMLqmmzmjYbH3ToSSTUGnmHo"
CHAT_ID = "423798633"
ADMIN_ID = 423798633

USERS_FILE = "users.txt"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return set(map(int, f.read().splitlines()))
    return set()

def save_users():
    with open(USERS_FILE, "w") as f:
        f.write("\n".join(map(str, USER_LIST)))

USER_LIST = load_users()

MESSAGE_HISTORY = deque(maxlen=20)

NETWORKS = ["solana", "ethereum", "bsc", "bitcoin", "tron", "base", "xrp"]

MIN_LIQUIDITY = 50000
MIN_VOLUME_24H = 100000
MIN_TXNS_24H = 500
MIN_PRICE_CHANGE_24H = 5.0
MIN_FDV = 1000000
MAX_FDV = 10000000  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å 50 –º–ª–Ω –¥–æ 10 –º–ª–Ω
MAX_TOKEN_AGE_DAYS = 14

app = Application.builder().token(TOKEN).build()

async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    USER_LIST.add(user_id)
    save_users()
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!\nüìå Username: @{username}\nüÜî ID: {user_id}"
    )

async def add_user(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser USER_ID")
        return
    try:
        user_id = int(context.args[0])
        USER_LIST.add(user_id)
        save_users()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É.")
    except ValueError:
        await update.message.reply_text("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def remove_user(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeuser USER_ID")
        return
    try:
        user_id = int(context.args[0])
        if user_id in USER_LIST:
            USER_LIST.remove(user_id)
            save_users()
            await update.message.reply_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.")
    except ValueError:
        await update.message.reply_text("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def list_users(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    if not USER_LIST:
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    users_text = "\n".join(map(str, USER_LIST))
    await update.message.reply_text(f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_text}")

async def send_to_all(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    if not USER_LIST:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return
    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    count = 0
    for user in USER_LIST:
        try:
            await context.bot.send_message(chat_id=user, text=message)
            count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

async def check_large_transactions():
    while True:
        for network in NETWORKS:
            url = f"https://api.dexscreener.com/latest/dex/search?q={network}"
            try:
                response = requests.get(url, timeout=10)
                response.raise_for_status()
                data = response.json()
            except requests.RequestException as e:
                logging.error(f"–û—à–∏–±–∫–∞ DexScreener ({network}): {e}")
                continue
            if "pairs" not in data or not isinstance(data["pairs"], list):
                continue
            for token in data["pairs"]:
                try:
                    created_at_timestamp_raw = token.get("pairCreatedAt")
                    if not created_at_timestamp_raw or created_at_timestamp_raw == 0:
                        continue
                    created_at_timestamp = created_at_timestamp_raw / 1000
                    token_age_days = (datetime.now(timezone.utc) - datetime.fromtimestamp(created_at_timestamp, tz=timezone.utc)).days
                    if token_age_days > MAX_TOKEN_AGE_DAYS:
                        continue

                    volume = float(token.get("volume", {}).get("h24", 0))
                    liquidity = float(token.get("liquidity", {}).get("usd", 0))
                    txns = int(token.get("txns", {}).get("h24", 0))
                    price_change = float(token.get("priceChange", {}).get("h24", 0))
                    fdv = float(token.get("fdv", 0))
                    if fdv > MAX_FDV or fdv < MIN_FDV:
                        continue

                    base_symbol = token["baseToken"]["symbol"]
                    dex_url = token.get("url", "")

                    if liquidity >= MIN_LIQUIDITY and volume >= MIN_VOLUME_24H and txns >= MIN_TXNS_24H and price_change >= MIN_PRICE_CHANGE_24H:
                        message = (
                            f"üöÄ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω {base_symbol} ({network.upper()})!\n"
                            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.0f}\n"
                            f"üìä –û–±—ä—ë–º: ${volume:,.0f}\n"
                            f"üîÅ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {txns}\n"
                            f"üìà –†–æ—Å—Ç: {price_change}%\n"
                            f"üí∞ FDV: ${fdv:,.0f}\n"
                            f"üìÜ –í–æ–∑—Ä–∞—Å—Ç: {token_age_days} –¥–Ω–µ–π\n"
                            f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤ DexScreener]({dex_url})"
                        )
                        for user in USER_LIST:
                            try:
                                await app.bot.send_message(chat_id=user, text=message, parse_mode="Markdown")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user}: {e}")
                        MESSAGE_HISTORY.append(message)
                        await asyncio.sleep(3)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        await asyncio.sleep(600)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("adduser", add_user))
app.add_handler(CommandHandler("removeuser", remove_user))
app.add_handler(CommandHandler("users", list_users))
app.add_handler(CommandHandler("sendall", send_to_all))

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(check_large_transactions())
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except RuntimeError:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
