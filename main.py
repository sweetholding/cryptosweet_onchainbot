import os
import logging
import nest_asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import requests
import asyncio
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è Railway (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncio)
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
TOKEN = "7594557278:AAH3JKXfwupIMLqmmzmjYbH3ToSSTUGnmHo"
CHAT_ID = "423798633"
ADMIN_ID = 423798633  # –¢–≤–æ–π Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_LOG_FILE = "users.txt"
BANNED_USERS_FILE = "banned_users.txt"

# –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç
NETWORKS = ["solana", "ethereum", "bsc", "bitcoin", "tron", "base", "ton", "xrp", "zora"]

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_HISTORY = deque(maxlen=20)

if not TOKEN or not CHAT_ID:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_banned_users():
    if not os.path.exists(BANNED_USERS_FILE):
        return set()
    with open(BANNED_USERS_FILE, "r", encoding="utf-8") as f:
        return set(int(line.strip()) for line in f)

banned_users = load_banned_users()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def log_user(user_id, username):
    if user_id in banned_users:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    
    user_info = f"{user_id} - {username}\n"
    if not os.path.exists(USER_LOG_FILE):
        with open(USER_LOG_FILE, "w", encoding="utf-8") as f:
            f.write(user_info)
    else:
        with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
            if user_info not in f.read():
                with open(USER_LOG_FILE, "a", encoding="utf-8") as fa:
                    fa.write(user_info)
    logging.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        logging.warning(f"‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏: {user_id} ({username})")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user(user_id, username)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await app.bot.send_message(chat_id=ADMIN_ID, text=f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
    
    await update.message.reply_text("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä—ã–Ω–∫–æ–º!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg in MESSAGE_HISTORY:
        await update.message.reply_text(msg)

# –ö–æ–º–∞–Ω–¥–∞ /users –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_users(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    if not os.path.exists(USER_LOG_FILE):
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    with open(USER_LOG_FILE, "r", encoding="utf-8") as f:
        users = f.read()
    await update.message.reply_text(f"üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
async def check_large_transactions():
    for network in NETWORKS:
        url = f"https://api.dexscreener.com/latest/dex/search?q={network}&networkId=mainnet"
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DexScreener ({network}): {e}")
            continue
        
        if "pairs" not in data or not isinstance(data["pairs"], list):
            logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {network}: {data}")
            continue
        
        for token in data["pairs"]:
            try:
                volume = float(token.get("volume", {}).get("h24", 0))
                base_symbol = token["baseToken"]["symbol"]
                dex_url = token.get("url", "")
                
                if (base_symbol in ["BTC", "ETH"] and volume > 3000000) or (volume > 200000):
                    message = (
                        f"üî• –ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {base_symbol} ({network.upper()})!\n"
                        f"üìä –û–±—ä–µ–º –∑–∞ 24—á: ${volume}\n"
                        f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ DexScreener]({dex_url})"
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
                    MESSAGE_HISTORY.append(message)
                    await app.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
                    await asyncio.sleep(3)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Ç–∏ {network}: {e}")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞
async def check_loop():
    while True:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å–µ—Ç—è–º...")
        await check_large_transactions()
        await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("users", get_users))

# –§—É–Ω–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    asyncio.create_task(check_loop())
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except RuntimeError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞!")
